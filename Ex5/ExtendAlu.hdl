// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:

     ALU(x=x,
            y=y,
            zx=instruction[5],
            nx=instruction[4],
            zy=instruction[3],
            ny=instruction[2],
            f=instruction[1],
            no=instruction[0],
            out=ALUres,
            zr=zrALU,
            ng=ngALU);

    ShiftLeft(in=x,out=shiftLeftX);
    ShiftRight(in=x,out=shiftRightX);
    ShiftLeft(in=y,out=shiftLeftY);
    ShiftRight(in=y,out=shiftRightY);  
    Mux4Way16(a=shiftRightY, b=shiftRightX, c=shiftLeftY, d=shiftLeftX, sel=instruction[4..5], out=resShift, out[0..7]=resShift0to7, out[8..15]=resShift8to15, out[15]=isNeg);

    // calculate zr on the Shift output
    Or8Way(in=resShift0to7,out=or8wayRes1);
    Or8Way(in=resShift8to15,out=or8wayRes2);
    Or(a=or8wayRes1,b=or8wayRes2,out=notZr);
    Not(in=notZr,out=zrShift);    
  
    // calculate ng on the Shift output
    And(a=true, b=isNeg, out=ngShift);
    
     // decide between ALU output and Shift output
     And(a=instruction[7],b=instruction[8],out=regAlu);
     Mux16(a=resShift,b=ALUres,sel=regAlu,out=out);
     Mux(a=zrShift, b=zrALU, sel=regAlu, out=zr);
     Mux(a=ngShift, b=ngALU, sel=regAlu, out=ng);
     


}
